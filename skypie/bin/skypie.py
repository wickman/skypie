from __future__ import print_function, absolute_import

import argparse
import functools
import sys

from skypie.acquisition import Mortgage
from skypie.colorant import breakeven
from skypie.depreciation import LinearDepreciation
from skypie.model import UsageModel, simple
from skypie.planes import PLANES
from skypie.tabulator import table
from skypie.upgrades import G500_GTN750


# Want an hourly flying model.  Parameters:
#
# Personal hours
# Part 91 hours
# Hobbs : tach ratio of part 91 operations
# Revenue per hour hobbs hour

def setup_argparser():
  parser = argparse.ArgumentParser()

  # args:
  #    plane [h_value or h_range] [m_value or m_range]
  #    da40 2000 0,180,24

  parser.add_argument('plane', choices=PLANES)
  parser.add_argument('h_range', help='Hours of flight, or range.')
  parser.add_argument('m_range', help='Months of ownership, or range.')
  parser.add_argument('--debug', action='store_true')
  parser.add_argument('--output', choices=['hourly', 'outlay'], default='hourly')

  # parser.add_argument('--breakeven', ...)

  setup_argparser_usagemodel(parser)
  setup_argparser_acquisition(parser)
  setup_argparser_depreciation(parser)
  setup_argparser_plane_option_overrides(parser)
  return parser


def setup_argparser_usagemodel(parser):
  # --usage-rate=1.0
  # --usage-hobbs-ratio=1.2
  # --usage-revenue=None
  # --help-usage
  group = parser.add_argument_group('usage model')

  group.add_argument('--usage-rate', default=1.0, type=float,
      help='The percentage of owner use vs leaseback use, where 1.0 is 100%% owner use and 0.0 is '
           '100%% leaseback use.  Anything less than 1.0 requires 100-hour inspections and will '
           'raise the hourly cost.  Example: A usage rate of .25 means that the owner flies 1 '
           'hour (tach) for every 3 hours (hobbs) of leaseback operation.')

  group.add_argument('--usage-hobbs-ratio', default=1.2, type=float,
      help='The hobbs to tach ratio. For flight school operation, this number will be high '
           'since certain pre-takeoff operations run more slowly during training. The '
           'default of 1.2 means that for every 5 hours of tach time, 6 hours of hobbs is '
           'billed.')

  group.add_argument('--usage-revenue', default=0, type=float,
      help='The per-hobbs-hour revenue generated by the plane when leased.')


def parse_usagemodel(args):
  pass


def setup_argparser_acquisition(parser):
  group = parser.add_argument_group('acquisition options')
  group.add_argument('--acquisition-type', default='finance', choices=['cash', 'finance'])
  group.add_argument('--financing-term', default=120, type=int,
      help='Financing term in months.')
  group.add_argument('--financing-rate', default=6.25, type=float,
      help='Financing rate e.g. 6.25 for 6.25%%.')
  group.add_argument('--financing-down', default=15, type=float,
      help='Financing down payment percentage, e.g. 15 for 15%%.')


def parse_acquisition(args):
  if args.acquisition_type == 'cash':
    return AllCash()
  elif args.acquisition_type == 'finance':
    return Mortgage(
        args.financing_down / 100.0,
        args.financing_term,
        args.financing_rate / 100.0,
    )
  else:
    die('Unknown acquisition type: %s' % args.acquisition_type)


def setup_argparser_depreciation(parser):
  # --depreciation=fixed:percent
  # --depreciation=exponential:amount:rate
  # --depreciation=linear:months
  # --help-depreciation
  # => multiple invocations uses the combinator
  pass


class SaleAction(argparse.Action):
  def __init__(self, option_strings, dest, nargs=None, **kwargs):
    if nargs is not None:
      raise ValueError('nargs is not allowed.')
    super(SaleAction, self).__init__(option_strings, dest, nargs=0, **kwargs)

  def __call__(self, parser, namespace, values, option_string=None):
    if option_string == '--keep':
      setattr(namespace, self.dest, False)
    elif option_string == '--sell':
      setattr(namespace, self.dest, True)
    else:
      raise argparse.ArgumentError


def setup_argparser_plane_option_overrides(parser):
  # --sell --keep
  # --price=price
  # --insurance=vfr,ifr
  # --annual=rate
  # --upgrade=name
  group = parser.add_argument_group('plane options')
  group.add_argument('--keep', '--sell', dest='sell', action=SaleAction,
      help='Whether to keep or sell the plane following calculation; default is to keep.')
  group.add_argument('--price', type=float, default=None, help='Override the price of the airplane.')
  group.add_argument('--annual', type=float, default=None, help='Override the expected annual price.')


def die(error):
  print(error, file=sys.stderr)
  sys.exit(1)


def parse_range(range_string):
  try:
    return [int(range_string)]
  except ValueError:
    pass

  try:
    start, stop, extent = range_string.split(',', 3)
    return range(int(start), int(stop), int(extent))
  except ValueError:
    die('Invalid number or range string: %s' % range_string)


def main():
  parser = setup_argparser()

  args = parser.parse_args()

  plane = PLANES[args.plane]
  h_range = parse_range(args.h_range)
  m_range = parse_range(args.m_range)
  acquisition = parse_acquisition(args)

  print('Sell or keep: %s' % ('sell' if args.sell else 'keep'))

  def model(plane, acquisition, hours, months):
    outlay = simple(plane, acquisition, hours, months, sell=args.sell)

    if args.output == 'outlay':
      return outlay
    elif args.output == 'hourly':
      return outlay / hours if hours > 0 else 0
    else:
      raise ValueError('Unknown outlay type %s' % args.output)

  if args.price is not None:
    plane = plane(price=args.price)

  if args.annual is not None:
    plane = plane(annual=args.annual)

  table(
      plane,
      acquisition,
      model,
      h_range=h_range,
      m_range=m_range,
      colorant=breakeven(285),
  )
  print('\n')
